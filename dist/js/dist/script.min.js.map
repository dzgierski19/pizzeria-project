{"version":3,"sources":["script.js"],"names":["select","templateOf","menuProduct","containerOf","menu","cart","all","menuProducts","imageWrapper","formInputs","amount","clickable","form","cartButton","widgets","linkIncrease","amountWidget","defaultValue","defaultMin","classNames","imageVisible","Handlebars","compile","document","querySelector","innerHTML","settings","id","data","_classCallCheck","this","Product","defaultMax","thisProduct","renderInMenu","getElements","templates","initAccordion","processOrder","_createClass","key","value","generatedHTML","utils","createDOMFromHTML","element","accordionTrigger","querySelectorAll","priceElem","menuContainer","addEventListener","event","preventDefault","activeProduct","menuProductsActive","classList","remove","wrapperActive","console","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","formData","serializeFormToObject","price","paramId","params","param","optionId","options","includes","selected","option","app","initMenu","productData","products","dataSource","init","thisApp","log"],"mappings":"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","file":"script.min.js","sourcesContent":["/* global Handlebars, utils, dataSource */ // eslint-disable-line no-unused-vars\n{\n  'use strict';\n  const select = {\n    templateOf: {\n      menuProduct: '#template-menu-product',\n    },\n    containerOf: {\n      menu: '#product-list',\n      cart: '#cart',\n    },\n    all: {\n      menuProducts: '#product-list > .product',\n      menuProductsActive: '#product-list > .product.active',\n      formInputs: 'input, select',\n    },\n    menuProduct: {\n      clickable: '.product__header',\n      form: '.product__order',\n      priceElem: '.product__total-price .price',\n      imageWrapper: '.product__images',\n      amountWidget: '.widget-amount',\n      cartButton: '[href=\"#add-to-cart\"]',\n    },\n    widgets: {\n      amount: {\n        input: 'input[name=\"amount\"]',\n        linkDecrease: 'a[href=\"#less\"]',\n        linkIncrease: 'a[href=\"#more\"]',\n      },\n    },\n  };\n  const classNames = {\n    menuProduct: {\n      wrapperActive: 'active',\n      imageVisible: 'active',\n    },\n  };\n  const settings = {\n    amountWidget: {\n      defaultValue: 1,\n      defaultMin: 1,\n      defaultMax: 9,\n    }\n  };\n  const templates = {\n    menuProduct: Handlebars.compile(document.querySelector(select.templateOf.menuProduct).innerHTML),\n  };\n  class Product{\n    constructor(id, data){\n      const thisProduct = this;\n      thisProduct.id = id;\n      thisProduct.data = data;\n      thisProduct.renderInMenu();\n      thisProduct.getElements();\n      thisProduct.initAccordion();\n      thisProduct.initOrderForm();\n      thisProduct.processOrder();\n      // console.log('new Product:', thisProduct);\n    }\n    renderInMenu(){\n      const thisProduct = this;\n      /* Generate HTML based on template */\n      const generatedHTML = templates.menuProduct(thisProduct.data);\n      /* create element using utils.createElementFromHTML */\n      thisProduct.element = utils.createDOMFromHTML(generatedHTML);\n      /* find menu container */\n      const menuContainer = document.querySelector(select.containerOf.menu);\n      /* add element to menu */\n      menuContainer.appendChild(thisProduct.element);\n    }\n    getElements(){\n      const thisProduct = this;\n      thisProduct.accordionTrigger = thisProduct.element.querySelector(select.menuProduct.clickable);\n      // console.log(thisProduct.accordionTrigger);\n      thisProduct.form = thisProduct.element.querySelector(select.menuProduct.form);\n      // console.log(thisProduct.form);\n      thisProduct.formInputs = thisProduct.form.querySelectorAll(select.all.formInputs);\n      // console.log(thisProduct.formInputs);\n      thisProduct.cartButton = thisProduct.element.querySelector(select.menuProduct.cartButton);\n      // console.log(thisProduct.cartButton);\n      thisProduct.priceElem = thisProduct.element.querySelector(select.menuProduct.priceElem);\n      // console.log(thisProduct.priceElem);\n      thisProduct.imageWrapper = thisProduct.element.querySelector(select.menuProduct.imageWrapper);\n      console.log(thisProduct.imageWrapper);\n    }\n    initAccordion(){\n      const thisProduct = this;\n      /* START: add event listener to clickable trigger on event click */\n      thisProduct.accordionTrigger.addEventListener('click', function(event) {\n        /* prevent default action for event */\n        event.preventDefault();\n        /* find active product (product that has active class) */\n        const activeProduct = document.querySelector(select.all.menuProductsActive);\n        // console.log(activeProduct);\n        /* if there is active product and it's not thisProduct.element, remove class active from it */\n        if (activeProduct != null && activeProduct != thisProduct.element) {\n          activeProduct.classList.remove(classNames.menuProduct.wrapperActive);\n        }\n        /* toggle active class on thisProduct.element */\n        thisProduct.element.classList.toggle(classNames.menuProduct.wrapperActive);\n      });\n    }\n    initOrderForm(){\n      const thisProduct = this;\n      // console.log('initOrderForm method executed');\n      thisProduct.form.addEventListener('submit', function(event){\n        event.preventDefault();\n        thisProduct.processOrder();\n      });\n      for(let input of thisProduct.formInputs){\n        input.addEventListener('change', function(){\n          thisProduct.processOrder();\n        });\n      }\n      thisProduct.cartButton.addEventListener('click', function(event){\n        event.preventDefault();\n        thisProduct.processOrder();\n      });\n    }\n    processOrder(){\n      const thisProduct = this;\n      // console.log('processOrder method executed');\n      // covert form to object structure e.g. { sauce: ['tomato'], toppings: ['olives', 'redPeppers']}\n      const formData = utils.serializeFormToObject(thisProduct.form);\n      // console.log('formData', formData);\n      // set price to default price\n      let price = thisProduct.data.price;\n      // for every category (param)...\n      for(let paramId in thisProduct.data.params) {\n        // determine param value, e.g. paramId = 'toppings', param = { label: 'Toppings', type: 'checkboxes'... }\n        const param = thisProduct.data.params[paramId];\n        // console.log(paramId, param);\n        // for every option in this category\n        for(let optionId in param.options) {\n          // determine option value, e.g. optionId = 'olives', option = { label: 'Olives', price: 2, default: true }\n          const option = param.options[optionId];\n          // define when element is selected\n          const selected = formData[paramId].includes(optionId);\n          // console.log(optionId, option);\n          // check if there is param with a name of paramId in formData and if it includes optionId\n          if(formData[paramId] && selected) {\n            // check if the option is not default\n            if(!option.default) {\n              // add option price to price variable\n              // console.log('opt1');\n              price += option.price;\n            }\n          } // check if the option is default\n          else if (option.default) {\n            // reduce price variable\n            // console.log('opt2');\n            price -= option.price;\n          }\n        }\n        // update calculated price in the HTML\n        thisProduct.priceElem.innerHTML = price;\n      }\n    }\n  }\n  const app = {\n    initMenu: function() {\n      const thisApp = this;\n      // console.log('thisApp.data:', thisApp.data);\n      for(let productData in thisApp.data.products){\n        new Product(productData, thisApp.data.products[productData]);\n      }\n    },\n    initData: function(){\n      const thisApp = this;\n      thisApp.data = dataSource;\n    },\n    init: function(){\n      const thisApp = this;\n      console.log('*** App starting ***');\n      console.log('thisApp:', thisApp);\n      console.log('classNames:', classNames);\n      console.log('settings:', settings);\n      console.log('templates:', templates);\n      thisApp.initData();\n      thisApp.initMenu();\n    },\n  };\n  app.init();\n}"]}