{"version":3,"sources":["script.js"],"names":["select","templateOf","menuProduct","containerOf","menu","cart","all","priceElem","menuProducts","menuProductsActive","widgets","clickable","form","amount","input","linkDecrease","settings","amountWidget","wrapperActive","imageVisible","defaultValue","compile","document","querySelector","innerHTML","Product","id","data","_classCallCheck","this","templates","Handlebars","thisProduct","renderInMenu","getElements","initAccordion","initOrderForm","processOrder","_createClass","key","value","createDOMFromHTML","generatedHTML","appendChild","element","formInputs","querySelectorAll","utils","cartButton","accordionTrigger","addEventListener","event","preventDefault","classList","toggle","classNames","_step","_iterator","Symbol","iterator","_iteratorNormalCompletion","next","done","activeProduct","price","paramId","params","param","optionId","options","option","selected","formData","includes","console","log","app","initMenu","productData","thisApp","products","initData","dataSource","init"],"mappings":"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","file":"script.min.js","sourcesContent":["/* global Handlebars, utils, dataSource */ // eslint-disable-line no-unused-vars\r\n{\r\n  'use strict';\r\n \r\n  const select = {\r\n    templateOf: {\r\n      menuProduct: '#template-menu-product',\r\n    },\r\n    containerOf: {\r\n      menu: '#product-list',\r\n      cart: '#cart',\r\n    },\r\n    all: {\r\n      menuProducts: '#product-list > .product',\r\n      menuProductsActive: '#product-list > .product.active',\r\n      formInputs: 'input, select',\r\n    },\r\n    menuProduct: {\r\n      clickable: '.product__header',\r\n      form: '.product__order',\r\n      priceElem: '.product__total-price .price',\r\n      imageWrapper: '.product__images',\r\n      amountWidget: '.widget-amount',\r\n      cartButton: '[href=\"#add-to-cart\"]',\r\n    },\r\n    widgets: {\r\n      amount: {\r\n        input: 'input[name=\"amount\"]',\r\n        linkDecrease: 'a[href=\"#less\"]',\r\n        linkIncrease: 'a[href=\"#more\"]',\r\n      },\r\n    },\r\n  };\r\n  \r\n  const classNames = {\r\n    menuProduct: {\r\n      wrapperActive: 'active',\r\n      imageVisible: 'active',\r\n    },\r\n  };\r\n  \r\n  const settings = {\r\n    amountWidget: {\r\n      defaultValue: 1,\r\n      defaultMin: 1,\r\n      defaultMax: 9,\r\n    }\r\n  };\r\n \r\n  const templates = {\r\n    menuProduct: Handlebars.compile(document.querySelector(select.templateOf.menuProduct).innerHTML),\r\n  };\r\n\r\n  class Product{\r\n    constructor(id, data){\r\n      const thisProduct = this;\r\n      thisProduct.id = id;\r\n      thisProduct.data = data;\r\n      thisProduct.renderInMenu();\r\n      thisProduct.getElements();\r\n      thisProduct.initAccordion();\r\n      thisProduct.initOrderForm();\r\n      thisProduct.processOrder();\r\n      //console.log('new Product:', thisProduct);\r\n    }\r\n    \r\n    renderInMenu(){\r\n      const thisProduct = this;\r\n      /* Generate HTML based on template */\r\n      const generatedHTML = templates.menuProduct(thisProduct.data);\r\n      /* create element using utils.createElementFromHTML */\r\n      thisProduct.element = utils.createDOMFromHTML(generatedHTML);\r\n      /* find menu container */\r\n      const menuContainer = document.querySelector(select.containerOf.menu);\r\n      /* add element to menu */\r\n      menuContainer.appendChild(thisProduct.element);\r\n    }\r\n    \r\n    getElements(){\r\n      const thisProduct = this;\r\n\r\n      thisProduct.accordionTrigger = thisProduct.element.querySelector(select.menuProduct.clickable);\r\n      thisProduct.form = thisProduct.element.querySelector(select.menuProduct.form);\r\n      thisProduct.formInputs = thisProduct.form.querySelectorAll(select.all.formInputs);\r\n      thisProduct.cartButton = thisProduct.element.querySelector(select.menuProduct.cartButton);\r\n      thisProduct.priceElem = thisProduct.element.querySelector(select.menuProduct.priceElem);\r\n    }\r\n\r\n    initAccordion(){\r\n      const thisProduct = this;\r\n\r\n      thisProduct.accordionTrigger.addEventListener('click', function(event) {\r\n        /* prevent default action for event */\r\n        event.preventDefault();\r\n        /* find active product (product that has active class) */\r\n        const activeProduct = document.querySelector(select.all.menuProductsActive);\r\n        // console.log(activeProduct);\r\n        /* if there is active product and it's not thisProduct.element, remove class active from it */\r\n        if (activeProduct != null && activeProduct != thisProduct.element) {\r\n          activeProduct.classList.remove(classNames.menuProduct.wrapperActive);\r\n        }\r\n        /* toggle active class on thisProduct.element */\r\n        thisProduct.element.classList.toggle(classNames.menuProduct.wrapperActive);\r\n      });\r\n    }\r\n    initOrderForm(){\r\n      const thisProduct = this;\r\n      // console.log('initOrderForm method executed');\r\n      thisProduct.form.addEventListener('submit', function(event){\r\n        event.preventDefault();\r\n        thisProduct.processOrder();\r\n      });\r\n      \r\n      for(let input of thisProduct.formInputs){\r\n        input.addEventListener('change', function(){\r\n          thisProduct.processOrder();\r\n        });\r\n      }\r\n      \r\n      thisProduct.cartButton.addEventListener('click', function(event){\r\n        event.preventDefault();\r\n        thisProduct.processOrder();\r\n      });\r\n    }\r\n    \r\n    processOrder(){\r\n      const thisProduct = this;\r\n      // console.log('processOrder method executed');\r\n      // covert form to object structure e.g. { sauce: ['tomato'], toppings: ['olives', 'redPeppers']}\r\n      const formData = utils.serializeFormToObject(thisProduct.form);\r\n      // console.log('formData', formData);\r\n      \r\n      // set price to default price\r\n      let price = thisProduct.data.price;\r\n      \r\n      // for every category (param)...\r\n      for(let paramId in thisProduct.data.params) {\r\n      // determine param value, e.g. paramId = 'toppings', param = { label: 'Toppings', type: 'checkboxes'... }\r\n        const param = thisProduct.data.params[paramId];\r\n        //console.log(paramId, param);\r\n      \r\n        // for every option in this category\r\n        for(let optionId in param.options) {\r\n        // determine option value, e.g. optionId = 'olives', option = { label: 'Olives', price: 2, default: true }\r\n          const option = param.options[optionId];\r\n          const selected = formData[paramId].includes(optionId);\r\n          // console.log(optionId, option);\r\n          // check if there is param with a name of paramId in formData and if it includes optionId\r\n          if(formData[paramId] && selected) {\r\n            // check if the option is not default\r\n            if(option.default) {\r\n              // add option price to price variable\r\n              console.log('opt1');\r\n              price += option.price;\r\n            }\r\n          } else if (option.default) {\r\n            // check if the option is default\r\n            // reduce price variable\r\n            console.log('opt2');\r\n            price -= option.price;\r\n          }\r\n        }\r\n        // update calculated price in the HTML\r\n        thisProduct.priceElem.innerHTML = price;\r\n      }\r\n    }\r\n  }\r\n\r\n  const app = {\r\n    initMenu: function() {\r\n      const thisApp = this;\r\n      console.log('thisApp.data:', thisApp.data);\r\n      for(let productData in thisApp.data.products){\r\n        new Product(productData, thisApp.data.products[productData]);\r\n      }\r\n    },\r\n    initData: function(){\r\n      const thisApp = this;\r\n      thisApp.data = dataSource;\r\n    },\r\n    init: function(){\r\n      const thisApp = this;\r\n      console.log('*** App starting ***');\r\n      console.log('thisApp:', thisApp);\r\n      console.log('classNames:', classNames);\r\n      console.log('settings:', settings);\r\n      console.log('templates:', templates);\r\n      thisApp.initData();\r\n      thisApp.initMenu();\r\n    },\r\n  };\r\n  app.init();\r\n}"]}